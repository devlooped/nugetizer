<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <ItemGroup>
    <CompilerVisibleProperty Include="IsPacking" />
    <CompilerVisibleProperty Include="PackageId" />
    <CompilerVisibleProperty Include="PackageIcon" />
    <CompilerVisibleProperty Include="PackageIconUrl" />
    <CompilerVisibleProperty Include="PackageReadmeFile" />
    <CompilerVisibleProperty Include="PackageLicenseExpression" />
    <CompilerVisibleProperty Include="PackageLicenseFile" />
    <CompilerVisibleProperty Include="PackageLicenseUrl" />
    <CompilerVisibleProperty Include="SourceControlInformationFeatureSupported" />
    <CompilerVisibleProperty Include="RepositoryCommit" />
    <CompilerVisibleProperty Include="RepositoryUrl" />
    <CompilerVisibleProperty Include="PackageProjectUrl" />
    <CompilerVisibleProperty Include="EmbedUntrackedSources" />
    <CompilerVisibleProperty Include="EnableSourceLink" />

    <CompilerVisibleProperty Include="Authors" />
    <CompilerVisibleProperty Include="AssemblyName" />
  </ItemGroup>

  <Target Name="_AddDescription" BeforeTargets="GenerateMSBuildEditorConfigFileShouldRun">
    <ItemGroup>
      <!-- We can't unconditionally emit Description since it can have newlines and that breaks editorconfig. -->
      <CompilerVisibleProperty Include="Description" Condition="$(Description) == 'Package Description'" />
    </ItemGroup>
  </Target>

  <ItemGroup Label="SponsorLink">
    <SponsorablePackageId Include="NuGetizer" />
  </ItemGroup>

  <!-- This ensures devlooped targets are imported transitively even if we are a dev dependency 
       and therefore don't propagate the SL dependency, which would otherwise cause a build error 
       due to analyzers being forcedly transitive even if the reference is private assets/dev dep.
  -->
  <Import Project="Devlooped.SponsorLink.targets" Condition="$(SponsorLinkImported) != true"/>
</Project>
