<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultDescription_DefaultValue" xml:space="preserve">
    <value>Package Description</value>
  </data>
  <data name="DefaultDescription_ID" xml:space="preserve">
    <value>NG0101</value>
  </data>
  <data name="DefaultDescription_Message" xml:space="preserve">
    <value>Provide a short description of your package for improved discoverability.</value>
  </data>
  <data name="DefaultDescription_Description" xml:space="preserve">
    <value>The default description set by the .NET SDK ('Package Description') is being used for your package. This will look poorly in the NuGet gallery.</value>
  </data>
  <data name="DefaultDescription_Title" xml:space="preserve">
    <value>Default description detected</value>
  </data>
  <data name="LongDescription_ID" xml:space="preserve">
    <value>NG0102</value>
  </data>
  <data name="LongDescription_Message" xml:space="preserve">
    <value>The Description property used for the package must be up to 4000 characters long.</value>
  </data>
  <data name="LongDescription_Title" xml:space="preserve">
    <value>Provided description is too long</value>
  </data>
  <data name="MissingIcon_Description" xml:space="preserve">
    <value>The PackageIcon project property can specify the path to a JPEG or PNG file to use as the package icon, which will be automatically packed properly.</value>
  </data>
  <data name="MissingIcon_ID" xml:space="preserve">
    <value>NG0103</value>
  </data>
  <data name="MissingIcon_Message" xml:space="preserve">
    <value>Consider providing a 128x128 icon in JPEG or PNG format.</value>
  </data>
  <data name="MissingIcon_Title" xml:space="preserve">
    <value>Package icon missing</value>
  </data>
  <data name="MissingReadme_Description" xml:space="preserve">
    <value>Setting the PackageReadmeFile project property is enough to get the file packed properly.</value>
  </data>
  <data name="MissingReadme_ID" xml:space="preserve">
    <value>NG0104</value>
  </data>
  <data name="MissingReadme_Message" xml:space="preserve">
    <value>Consider providing a markdown readme file for improved user experience on the NuGet gallery.</value>
  </data>
  <data name="MissingReadme_Title" xml:space="preserve">
    <value>Package readme missing</value>
  </data>
  <data name="MissingLicense_ID" xml:space="preserve">
    <value>NG0105</value>
  </data>
  <data name="MissingLicense_Message" xml:space="preserve">
    <value>Consider providing a package license expression for improved user experience on the NuGet gallery.</value>
  </data>
  <data name="MissingLicense_Title" xml:space="preserve">
    <value>Package license missing</value>
  </data>
  <data name="MissingLicense_Description" xml:space="preserve">
    <value>Set the PackageLicenseExpression project property to an accepted value such as 'MIT' or 'Apache-2.0'. See accepted values at https://spdx.org/licenses/.</value>
  </data>
  <data name="DuplicateLicense_ID" xml:space="preserve">
    <value>NG0106</value>
  </data>
  <data name="DuplicateLicense_Title" xml:space="preserve">
    <value>Incompatible package license attributes</value>
  </data>
  <data name="DuplicateLicense_Message" xml:space="preserve">
    <value>Only one of PackageLicenseExpression, PackageLicenseFile, and PackageLicenseUrl can be specified at a time.</value>
  </data>
  <data name="SourceLink_ID" xml:space="preserve">
    <value>NG0107</value>
  </data>
  <data name="SourceLink_Title" xml:space="preserve">
    <value>Source repository information missing</value>
  </data>
  <data name="SourceLink_Message" xml:space="preserve">
    <value>Consider including source repository information for a better user experience. </value>
  </data>
  <data name="SourceLink_Description" xml:space="preserve">
    <value>SourceLink is the recommended way to automatically include this information. Install the relevant NuGet package for your source control provider (such as GitHub, AzureRepos, GitLab, etc.) and NuGetizer will automatically use the provided information.</value>
  </data>
  <data name="RepositoryUrl_ID" xml:space="preserve">
    <value>NG0108</value>
  </data>
  <data name="RepositoryUrl_Title" xml:space="preserve">
    <value>Repository URL missing</value>
  </data>
  <data name="RepositoryUrl_Message" xml:space="preserve">
    <value>Consider providing the RepositoryUrl metadata of your project if it is open source.</value>
  </data>
  <data name="RepositoryUrl_Description" xml:space="preserve">
    <value>This should be a publicly available url that can be invoked directly by a version control software. Populated automatically when setting the PublishRepositoryUrl project property to 'true' and using SourceLink.</value>
  </data>
  <data name="ProjectUrl_ID" xml:space="preserve">
    <value>NG0109</value>
  </data>
  <data name="ProjectUrl_Title" xml:space="preserve">
    <value>Project URL missing</value>
  </data>
  <data name="ProjectUrl_Message" xml:space="preserve">
    <value>Consider providing a distinct value for the PackageProjectUrl project property, which now defaults to RepositoryUrl with value '{0}'.</value>
  </data>
  <data name="ProjectUrl_Description" xml:space="preserve">
    <value>Make sure PackageProjectUrl is an actual homepage users can navigate to directly from nuget.org. RepositoryUrl, on the other hand, is intended for version control software.</value>
  </data>
</root>