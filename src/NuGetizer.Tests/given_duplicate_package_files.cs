using System.Linq;
using Microsoft.Build.Execution;
using Xunit;
using Xunit.Abstractions;

namespace NuGetizer
{
    public class given_duplicate_package_files
    {
        ITestOutputHelper output;

        public given_duplicate_package_files(ITestOutputHelper output)
        {
            this.output = output;
            Builder.BuildScenario(nameof(given_duplicate_package_files), target: "Restore")
                .AssertSuccess(output);
        }

        [Fact]
        public void exact_duplicates_are_removed()
        {
            var result = Builder.BuildScenario(nameof(given_duplicate_package_files),
                new { ReadmeA = "This is a readme", ReadmeB = "This is a readme" },
                target: "Pack");

            Assert.Equal(TargetResultCode.Success, result.ResultCode);
        }

        [Fact]
        public void same_source_different_target_are_preserved()
        {
            var result = Builder.BuildScenario(nameof(given_duplicate_package_files), target: "GetPackageContents");
            Assert.Equal(TargetResultCode.Success, result.ResultCode);

            Assert.Contains(result.Items, item => item.Matches(new
            {
                PackFolder = PackFolderKind.None,
                PackagePath = @"content/a/1/content.txt"
            }));
            Assert.Contains(result.Items, item => item.Matches(new
            {
                PackFolder = PackFolderKind.None,
                PackagePath = @"content/a/2/content.txt"
            }));
            Assert.Contains(result.Items, item => item.Matches(new
            {
                PackFolder = PackFolderKind.None,
                PackagePath = @"content/b/1/content.txt"
            }));
            Assert.Contains(result.Items, item => item.Matches(new
            {
                PackFolder = PackFolderKind.None,
                PackagePath = @"content/b/2/content.txt"
            }));

            result = Builder.BuildScenario(nameof(given_duplicate_package_files), target: "Pack");
            Assert.Equal(TargetResultCode.Success, result.ResultCode);
        }

        [Fact]
        public void real_duplicates_fail()
        {
            var result = Builder.BuildScenario(nameof(given_duplicate_package_files),
                new { ReadmeA = "First Readme", ReadmeB = "Second Readme" },
                target: "Pack");

            Assert.Equal(TargetResultCode.Failure, result.ResultCode);

            // A distinct Readme.txt is generated by a.csproj and b.csproj but both have the 
            // same PackagePath so we can't disambiguate after hashing the contents.
            Assert.Contains(result.Logger.Errors, e => e.Message.Contains("Readme.txt"));
        }
    }
}