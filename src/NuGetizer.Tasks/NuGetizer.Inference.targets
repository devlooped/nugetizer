<!--
***********************************************************************************************
NuGetizer.Inference.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="NuGetizer.Tasks.InferImplicitPackageReference" AssemblyFile="NuGetizer.Tasks.dll" />
  <UsingTask TaskName="NuGetizer.Tasks.EvaluateWildcards" AssemblyFile="NuGetizer.Tasks.dll" />

  <PropertyGroup>
    <!-- The PackFolder of primary output (build, symbols, doc and satellite assemblies) set if PackBuildOutput = true -->
    <PackFolder Condition="'$(PackFolder)' == ''">lib</PackFolder>

    <!-- Whether to include @(Content) items with CopyToOutputDirectory != '' in the package -->
    <PackContent Condition="'$(PackContent)' == ''">true</PackContent>
    <!-- Whether to include @(BuiltProjectOutputGroupOutput), @(DocumentationProjectOutputGroupOutput) and @(SatelliteDllsProjectOutputGroupOutput) items in the package -->
    <PackBuildOutput Condition="'$(PackBuildOutput)' == '' and '$(IsPackagingProject)' != 'true'">true</PackBuildOutput>
    <!-- Whether to include @(DebugSymbolsProjectOutputGroupOutput) items in the package -->
    <PackSymbols Condition="'$(PackSymbols)' == '' and '$(PackBuildOutput)' == 'true'">true</PackSymbols>

    <!-- Whether to include framework references (%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}') in the package -->
    <PackFrameworkReferences Condition="'$(PackFrameworkReferences)' == '' and '$(PackDependencies)' == 'false'">false</PackFrameworkReferences>
    <!-- Only default to true if the project isn't a nuget packaging project itself and its primary output is lib. -->
    <PackFrameworkReferences Condition="'$(PackFrameworkReferences)' == '' and '$(IsPackagingProject)' != 'true' and '$(PackFolder)' == 'lib'">true</PackFrameworkReferences>

    <_OutputFullPath Condition="$([System.IO.Path]::IsPathRooted($(OutputPath)))">$(OutputPath)</_OutputFullPath>
    <_OutputFullPath Condition="'$(_OutputFullPath)' == ''">$(MSBuildProjectDirectory.TrimEnd('\'))\$(OutputPath)</_OutputFullPath>
  </PropertyGroup>

  <ItemDefinitionGroup Label="Inference Defaults">
    <Compile>
      <!-- For Compile, the CodeLanguage should default to the project's default source extension -->
      <CodeLanguage>$(DefaultLanguageSourceExtension.TrimStart('.'))</CodeLanguage>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackCompile)' == 'true'">true</Pack>
      <BuildAction>Compile</BuildAction>
    </Compile>
    <Content>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackContent)' == 'true'">true</Pack>
      <BuildAction>Content</BuildAction>
    </Content>
    <EmbeddedResource>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackEmbeddedResource)' == 'true'">true</Pack>
      <BuildAction>EmbeddedResource</BuildAction>
    </EmbeddedResource>
    <None>
      <DefaultPackFolder>none</DefaultPackFolder>
      <Pack Condition="'$(PackNone)' == 'true'">true</Pack>
      <BuildAction>None</BuildAction>
    </None>
    <ApplicationDefinition>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackApplicationDefinition)' == 'true'">true</Pack>
      <BuildAction>ApplicationDefinition</BuildAction>
    </ApplicationDefinition>
    <Page>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackPage)' == 'true'">true</Pack>
      <BuildAction>Page</BuildAction>
    </Page>
    <Resource>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackResource)' == 'true'">true</Pack>
      <BuildAction>Resource</BuildAction>
    </Resource>
    <SplashScreen>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackSplashScreen)' == 'true'">true</Pack>
      <BuildAction>SplashScreen</BuildAction>
    </SplashScreen>
    <DesignData>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackDesignData)' == 'true'">true</Pack>
      <BuildAction>DesignData</BuildAction>
    </DesignData>
    <DesignDataWithDesignTimeCreatableTypes>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackDesignDataWithDesignTimeCreatableTypes)' == 'true'">true</Pack>
      <BuildAction>DesignDataWithDesignTimeCreatableTypes</BuildAction>
    </DesignDataWithDesignTimeCreatableTypes>
    <CodeAnalysisDictionary>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackCodeAnalysisDictionary)' == 'true'">true</Pack>
      <BuildAction>CodeAnalysisDictionary</BuildAction>
    </CodeAnalysisDictionary>
    <AndroidAsset>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackAndroidAsset)' == 'true'">true</Pack>
      <BuildAction>AndroidAsset</BuildAction>
    </AndroidAsset>
    <AndroidResource>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackAndroidResource)' == 'true'">true</Pack>
      <BuildAction>AndroidResource</BuildAction>
    </AndroidResource>
    <BundleResource>
      <DefaultPackFolder>content</DefaultPackFolder>
      <Pack Condition="'$(PackBundleResource)' == 'true'">true</Pack>
      <BuildAction>BundleResource</BuildAction>
    </BundleResource>

    <PackInference>
      <PackExclude />
    </PackInference>
    <InferenceCandidate>
      <DefaultPackFolder />
      <Pack />
      <PackFolder />
      <PackagePath />
      <PackageReference />
      <ShouldPack />
      <TargetPath />
    </InferenceCandidate>
  </ItemDefinitionGroup>

  <!-- Extend some built-in items with metadata we use in our inference targets -->
  <ItemDefinitionGroup>
    <PackageReference>
      <Pack />
      <Pack Condition="'$(PackDependencies)' == 'false'">false</Pack>
      <PrivateAssets />
    </PackageReference>
    <ImplicitPackageReference>
      <Pack />
      <Pack Condition="'$(PackDependencies)' == 'false'">false</Pack>
      <PrivateAssets />
    </ImplicitPackageReference>
    <ReferencePath>
      <Facade>false</Facade>
      <FrameworkFile>false</FrameworkFile>
      <NuGetPackageId />
      <Pack />
    </ReferencePath>
    <_ReferenceRelatedPaths>
      <Facade>false</Facade>
      <FrameworkFile>false</FrameworkFile>
      <NuGetPackageId />
      <Pack />
    </_ReferenceRelatedPaths>
    <PackageDependencies>
      <ParentPackage />
    </PackageDependencies>
  </ItemDefinitionGroup>

  <PropertyGroup>
    <GetPackageContentsDependsOn>
      $(GetPackageContentsDependsOn);
      _SetBuildOutputFrameworkSpecific;
      _SetDefaultPackageReferencePack;
      InferPackageContents
    </GetPackageContentsDependsOn>
  </PropertyGroup>

  <Target Name="_SetBuildOutputFrameworkSpecific" Condition="'$(BuildOutputFrameworkSpecific)' == ''" Returns="$(BuildOutputFrameworkSpecific)">
    <!-- Determine whether primary output is framework specific  -->
    <ItemGroup>
      <_BuildOutputFrameworkSpecific Include="@(PackFolderKind -> '%(FrameworkSpecific)')" Condition="'%(Identity)' == '$(PackFolder)'" />
    </ItemGroup>
    <PropertyGroup>
      <BuildOutputFrameworkSpecific>@(_BuildOutputFrameworkSpecific)</BuildOutputFrameworkSpecific>
    </PropertyGroup>
  </Target>

  <Target Name="_SetDefaultPackageReferencePack" Condition="'$(PackFolder)' == 'build'"
          BeforeTargets="InferPrimaryOutputDependencies;InferPackageContents">
    <ItemGroup>
      <PackageReference Update="@(PackageReference)"
                        Condition="$([MSBuild]::ValueOrDefault('%(Identity)', '').StartsWith('Microsoft.Build')) and '%(Pack)' != 'true'"
                        Pack="false" />
    </ItemGroup>
  </Target>

  <Target Name="_CollectInferenceCandidates" Inputs="@(PackInference)" Outputs="%(PackInference.Identity)-BATCH">
    <PropertyGroup>
      <PackExclude>%(PackInference.PackExclude)</PackExclude>
    </PropertyGroup>
    <!-- If we have an exclude wildcard to evaluate, do so and keep only non-matching items -->
    <EvaluateWildcards Condition="'$(PackExclude)' != ''" Items="@(%(PackInference.Identity))" Wildcards="$(PackExclude)">
      <Output TaskParameter="NonMatchingItems" ItemName="InferenceCandidate" />
    </EvaluateWildcards>
    <!-- Otherwise, just include all items as candidates -->
    <ItemGroup Condition="'$(PackExclude)' == ''">
      <InferenceCandidate Include="@(%(PackInference.Identity))" />
    </ItemGroup>
  </Target>

  <Target Name="InferPackageContents" DependsOnTargets="$(InferPackageContentsDependsOn);_CollectInferenceCandidates" Returns="@(PackageFile)">
    <ItemGroup>
      <InferenceCandidate>
        <ShouldPack Condition="('%(Pack)' == 'true' or '%(PackagePath)' != '' or '%(PackFolder)' != '' or '%(PackageReference)' != '') and '%(Pack)' != 'false'">true</ShouldPack>
      </InferenceCandidate>
      <!-- No need to re-assign a target path if the item already provides one. We do this because otherwise the built-in AssignTargetPath 
           task unconditionally re-sets it. See https://github.com/dotnet/msbuild/blob/master/src/Tasks/AssignTargetPath.cs -->
      <_InferenceCandidateWithTargetPath Include="@(InferenceCandidate)" Condition="'%(ShouldPack)' == 'true' and '%(TargetPath)' != ''" />
    </ItemGroup>

    <AssignTargetPath Files="@(InferenceCandidate)" RootFolder="$(MSBuildProjectDirectory)"
                      Condition="'%(ShouldPack)' == 'true' and '%(TargetPath)' == ''">
      <Output TaskParameter="AssignedFiles" ItemName="_InferenceCandidateWithTargetPath" />
    </AssignTargetPath>

    <ItemGroup Label="PackInference">
      <_InferenceCandidateWithTargetPath Condition="'%(PackFolder)' == ''">
        <!-- Items that are copied to the output directory adopt the kind of the build output -->
        <PackFolder Condition="'%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' != '' or 
                               '%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' != 'Never'">$(PackFolder)</PackFolder>
        <!-- Otherwise they cake on whichever is the default for their item type, as defined by their PackInference item -->
        <PackFolder Condition="'%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' == '' or 
                               '%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' == 'Never'">%(_InferenceCandidateWithTargetPath.DefaultPackFolder)</PackFolder>
      </_InferenceCandidateWithTargetPath>

      <!-- Items that are copied to the output directory are included from the target path -->
      <_InferredPackageFile Include="@(_InferenceCandidateWithTargetPath -> '$(_OutputFullPath)\%(TargetPath)')"
                            Condition="'%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' != '' and 
                                       '%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' != 'Never'" />
      <!-- Otherwise, they are included from the source location -->
      <_InferredPackageFile Include="@(_InferenceCandidateWithTargetPath->'%(FullPath)')"
                            Condition="'%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' == '' or 
                                       '%(_InferenceCandidateWithTargetPath.CopyToOutputDirectory)' == 'Never'" />
    </ItemGroup>

    <ItemGroup Label="BuildOutput Inference" Condition="'$(PackBuildOutput)' == 'true'">
      <!-- Unfortunately, even with https://github.com/Microsoft/msbuild/pull/1115, when multi-targeting 
           .NETFramework, the desktop WinFX.targets are imported which don't have the fix, so we need to 
           do it "the old way" for this particular output group -->
      <_SatelliteDllsProjectOutputGroupOutput Include="@(SatelliteDllsProjectOutputGroupOutput)"
                                              FinalOutputPath="%(FullPath)" />

      <_InferredProjectOutput Include="@(BuiltProjectOutputGroupOutput -> '%(FinalOutputPath)');
                                     @(BuiltProjectOutputGroupKeyOutput -> '%(FinalOutputPath)');
                                     @(DocumentationProjectOutputGroupOutput -> '%(FinalOutputPath)');
                                     @(_SatelliteDllsProjectOutputGroupOutput -> '%(FinalOutputPath)')">
        <PackFolder>$(PackFolder)</PackFolder>
        <FrameworkSpecific>$(BuildOutputFrameworkSpecific)</FrameworkSpecific>
      </_InferredProjectOutput>

      <_InferredProjectOutput Include="@(DebugSymbolsProjectOutputGroupOutput -> '%(FinalOutputPath)')"
                            Condition="'$(PackSymbols)' != 'false'">
        <PackFolder>$(PackFolder)</PackFolder>
        <FrameworkSpecific>$(BuildOutputFrameworkSpecific)</FrameworkSpecific>
      </_InferredProjectOutput>

      <_InferredPackageFile Include="@(_InferredProjectOutput -> Distinct())" />
    </ItemGroup>

    <ItemGroup Label="References Inference">
      <_InferredPackageFile Include="@(PackageReference)"
                            Condition="'%(PackageReference.Identity)' != 'NuGetizer' and
                                       '%(PackageReference.Identity)' != 'NETStandard.Library' and 
                                       '%(PackageReference.PrivateAssets)' != 'all' and
                                       '%(PackageReference.Pack)' != 'false'">
        <PackFolder>Dependency</PackFolder>
      </_InferredPackageFile>

      <!-- We can't use %(FrameworkFile)==true because it's not defined for raw file references and 
			     it also includes mscorlib which we don't need
			     TBD: maybe include ResolvedFrom=ImplicitlyExpandDesignTimeFacades too? -->
      <_InferredPackageFile Include="@(ReferencePath->'%(OriginalItemSpec)')"
                            Condition="'$(PackFrameworkReferences)' == 'true' and 
                                       '%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}' and 
                                       '%(ReferencePath.Pack)' != 'false'">
        <PackFolder>FrameworkReference</PackFolder>
      </_InferredPackageFile>
    </ItemGroup>

    <ItemGroup>
      <!-- 
				PackageId metadata on all PackageFile items means we can tell appart which ones came from which dependencies 
				NOTE: if PackageId is empty, we won't generate a manifest and it means the files need to be packed with the
				current project.
			-->
      <PackageFile Include="@(_InferredPackageFile)">
        <Source>Implicit</Source>
        <PackageId Condition="'$(IsPackable)' == 'true'">$(PackageId)</PackageId>
        <Platform>$(Platform)</Platform>
        <TargetFrameworkMoniker Condition="'$(IsPackagingProject)' != 'true'">$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
      </PackageFile>
    </ItemGroup>
  </Target>

  <Target Name="_UpdatePackageReferenceVersions"
          Inputs="@(PackageReference)"
          Outputs="|%(Identity)|"
          Condition="'$(UsingMicrosoftNETSdk)' == 'true' and '$(ManagePackageVersionsCentrally)' == 'true'"
          DependsOnTargets="RunResolvePackageDependencies"
          Returns="@(_CentrallyManagedDependency)">

    <PropertyGroup>
      <_CandidatePackageId>%(PackageReference.Identity)</_CandidatePackageId>
      <_CandidatePackageVersion>%(PackageReference.Version)</_CandidatePackageVersion>
      <_CandidatePackageIsImplicit>%(PackageReference.IsImplicitlyDefined)</_CandidatePackageIsImplicit>
    </PropertyGroup>

    <ItemGroup Condition="'$(_CandidatePackageVersion)' == '' and '$(_CandidatePackageIsImplicit)' != 'true'">
      <_CentrallyManagedDependency Include="@(PackageDependencies)"
                                   Condition="$([MSBuild]::ValueOrDefault('%(Identity)', '').StartsWith('$(_CandidatePackageId)/')) and 
                                              $([MSBuild]::ValueOrDefault('%(ParentPackage)', '')) == ''" />
    </ItemGroup>

    <PropertyGroup Condition="'@(_CentrallyManagedDependency)' != ''">
      <_CentrallyManagedDependency>%(_CentrallyManagedDependency.Identity)</_CentrallyManagedDependency>
      <_CentrallyManagedVersion>$(_CentrallyManagedDependency.Replace('$(_CandidatePackageId)/', ''))</_CentrallyManagedVersion>
    </PropertyGroup>

    <ItemGroup Condition="'$(_CentrallyManagedVersion)' != ''">
      <PackageReference Update="@(PackageReference)" Version="$(_CentrallyManagedVersion)" />
    </ItemGroup>

  </Target>

  <Target Name="_CollectPrimaryOutputDependencies" DependsOnTargets="BuildOnlySettings;RunResolvePackageDependencies;ResolveReferences" Returns="@(ImplicitPackageReference)">
    <Error Code="NG1003" Text="Centrally managed package versions is only supported when using the Microsoft.NET.Sdk."
           Condition="'$(ManagePackageVersionsCentrally)' == 'true' and '$(UsingMicrosoftNETSdk)' != 'true'" />
    <ItemGroup>
      <_PrimaryOutputRelatedFile Include="@(ReferencePath);@(_ReferenceRelatedPaths)"
                                 Condition="'%(NuGetPackageId)' != 'NETStandard.Library' and 
                                            '%(Facade)' != 'true' and 
                                            '%(FrameworkFile)' != 'true' and 
                                            '%(Pack)' != 'false'"/>
      <_TransitivePackageReference Include="@(PackageReference -> WithMetadataValue('PrivateAssets', 'all'))"
                                   Condition="'%(PackageReference.IsImplicitlyDefined)' != 'true' and '%(PackageReference.Pack)' != 'false' and '%(PackageReference.PackTransitive)' != 'false'"/>
    </ItemGroup>
    <InferImplicitPackageReference Condition="'@(_TransitivePackageReference)' != '' and '@(PackageDependencies)' != ''"
                                   PackageReferences="@(_TransitivePackageReference)"
                                   PackageDependencies="@(PackageDependencies)">
      <Output TaskParameter="ImplicitPackageReferences" ItemName="ImplicitPackageReference" />
    </InferImplicitPackageReference>
  </Target>

  <Target Name="_ResolvePackageDependencies" Condition="'$(UsingMicrosoftNETSdk)' == 'true'" DependsOnTargets="RunResolvePackageDependencies" />

  <Target Name="InferPrimaryOutputDependencies"
          Inputs="@(_PrimaryOutputRelatedFile)"
          Outputs="%(_PrimaryOutputRelatedFile.NuGetPackageId)"
          Returns="@(_InferredPackageFile)"
          DependsOnTargets="_ResolvePackageDependencies;_CollectPrimaryOutputDependencies">

    <ItemGroup>
      <_NuGetPackageId Include="@(_PrimaryOutputRelatedFile -> '%(NuGetPackageId)')" Condition="'%(NuGetPackageId)' != 'NETStandard.Library'" />
    </ItemGroup>
    <PropertyGroup>
      <_NuGetPackageId>@(_NuGetPackageId -> Distinct())</_NuGetPackageId>
    </PropertyGroup>
    <ItemGroup>
      <_PrimaryPackageReference Include="@(ImplicitPackageReference);@(PackageReference)" Condition="'$(_NuGetPackageId)' != '' and '%(Identity)' == '$(_NuGetPackageId)'" />
    </ItemGroup>

    <PropertyGroup>
      <_PrivateAssets>%(_PrimaryPackageReference.PrivateAssets)</_PrivateAssets>
      <_ShouldPack>%(_PrimaryPackageReference.Pack)</_ShouldPack>
      <_ShouldIncludeAssetsRegex>$(_NuGetPackageId)\\.+\\$(_PrivateAssets)\\.*</_ShouldIncludeAssetsRegex>
    </PropertyGroup>

    <ItemGroup>
      <_PrimaryOutputRelatedFileRef Include="@(_PrimaryOutputRelatedFile)"
                                    Condition="$([MSBuild]::ValueOrDefault('%(Directory)', '').Contains('/ref/')) or
                                               $([MSBuild]::ValueOrDefault('%(Directory)', '').Contains('\ref\'))" />
      <_PrimaryOutputRelatedFileLib Include="@(_PrimaryOutputRelatedFileRef -> '$([MSBuild]::ValueOrDefault('%(FullPath)', '').Replace(/ref/, /lib/).Replace(\ref\, \lib\))')">
        <OriginalItemSpec>%(_PrimaryOutputRelatedFileRef.Identity)</OriginalItemSpec>
      </_PrimaryOutputRelatedFileLib>
      <_ReplacedRefRelatedFile Include="@(_PrimaryOutputRelatedFileLib)" Condition="Exists('%(FullPath)')" />
      <_PrimaryOutputFinalFile Include="@(_ReplacedRefRelatedFile)"
                               Condition="'%(_ReplacedRefRelatedFile.FrameworkFile)' != 'true'" />
      <_PrimaryOutputFinalFile Include="@(_PrimaryOutputRelatedFile)" Exclude="@(_ReplacedRefRelatedFile -> '%(OriginalItemSpec)')"
                               Condition="'%(_PrimaryOutputRelatedFile.FrameworkFile)' != 'true'" />
    </ItemGroup>

    <ItemGroup Condition="'$(_ShouldPack)' != 'false' and '$(_PrivateAssets)' == 'all'">
      <_InferredPackageFile Include="@(_PrimaryOutputFinalFile)">
        <PackFolder>$(PackFolder)</PackFolder>
        <FrameworkSpecific>$(BuildOutputFrameworkSpecific)</FrameworkSpecific>
      </_InferredPackageFile>
    </ItemGroup>

    <ItemGroup Condition="'$(_ShouldPack)' != 'false' and '$(_PrivateAssets)' != 'all' and '$(_PrivateAssets)' != 'none' and '$(_PrivateAssets)' != ''">
      <!-- In this case, we only add files that have a matching path to the private assets value. 
				 i.e. for Mono.Options, PrivateAssets=lib, we'll include the file if its full path contains 
				 'Mono.Options\*\lib\*', meaning the file is a lib. -->
      <_InferredPackageFile Include="@(_PrimaryOutputFinalFile)"
                            Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(_PrimaryOutputFinalFile.FullPath)', '$(_ShouldIncludeAssetsRegex)', 'RegexOptions.IgnoreCase')) == 'true'">
        <PackFolder>$(PackFolder)</PackFolder>
        <FrameworkSpecific>$(BuildOutputFrameworkSpecific)</FrameworkSpecific>
      </_InferredPackageFile>
    </ItemGroup>
  </Target>

  <Target Name="_SetInferPackageContentsDependsOn" AfterTargets="_SetPropertiesFromCapabilities">
    <PropertyGroup>
      <!-- NOTE: this avoids taking dependencies on targets that are only available when the project supports the concept of references -->
      <_SupportsReferences Condition="
						$(_AllProjectCapabilities.Contains('AssemblyReferences')) or 
						$(_AllProjectCapabilities.Contains('COMReferences')) or
						$(_AllProjectCapabilities.Contains('ProjectReferences')) or 
						$(_AllProjectCapabilities.Contains('PackageReferences')) or 
						$(_AllProjectCapabilities.Contains('WinRTReferences')) or
						$(_AllProjectCapabilities.Contains('SDKReferences'))">true</_SupportsReferences>

      <InferPackageContentsDependsOn Condition="'$(_SupportsReferences)' == 'true'">
        ResolveReferences;
        _UpdatePackageReferenceVersions;
        InferPrimaryOutputDependencies
      </InferPackageContentsDependsOn>
      <InferPackageContentsDependsOn Condition="$(_AllProjectCapabilities.Contains('PackageReferences')) and 
                                               '$(UsingMicrosoftNETSdk)' == 'true' and 
                                               '$(ManagePackageVersionsCentrally)' == 'true'">
        $(InferPackageContentsDependsOn);
        _UpdatePackageReferenceVersions
      </InferPackageContentsDependsOn>
      <InferPackageContentsDependsOn>
        $(InferPackageContentsDependsOn);
        GetPackageTargetPath
      </InferPackageContentsDependsOn>
      <InferPackageContentsDependsOn Condition="$(_AllProjectCapabilities.Contains('AllTargetOutputGroups'))">
        $(InferPackageContentsDependsOn);
        AllProjectOutputGroups
      </InferPackageContentsDependsOn>
    </PropertyGroup>
  </Target>

</Project>
